<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:java="http://www.mulesoft.org/schema/mule/java"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
      http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
      http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
      http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
      http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

    <munit:config name="activemq-ssl-listener-reconnection-test-case.xml" minMuleVersion="4.3.0"/>

    <jms:config name="JMS_SSL_Config">
        <jms:active-mq-connection username="admin" password="admin" clientId="client1" >
            <reconnection >
                <reconnect-forever />
            </reconnection>
            <tls:context >
                <tls:trust-store path="tls/client-truststore.ks" password="racing" type="jks" />
            </tls:context>
            <jms:factory-configuration brokerUrl="ssl://localhost:${activemq.ssl.listener.port}" />
        </jms:active-mq-connection>
    </jms:config>

    <munit:after-test name="after-activemq-ssl-listener-reconnection-test" description="after test">
        <!-- Takes a while for jolokia rest api to get back up-->
        <until-successful maxRetries="50" millisBetweenRetries="1000">
            <set-variable variableName="brokerName" value="localhost"/>
            <set-variable variableName="destinationName" value="destination_1"/>
            <flow-ref name="purgeQueue"/>
        </until-successful>
    </munit:after-test>

    <munit:test name="connection-lost-at-least-twice-and-eventually-recovered-with-ssl-connection">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="jms-messages-listener-flow" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="containerName" value="mule-activemq-ssl"/>
            <set-variable variableName="message" value="#[output application/json --- { prophecy3008: 'Read angel, for the final days are upon us.'}]" />
            <set-variable variableName="correlationID" value="good-omens"/>
        </munit:behavior>
        <munit:execution>
            <flow-ref name="publish-message-to-broker" />
            <munit-tools:dequeue queueName="jmsMessagesQueue" timeout="50"  timeoutUnit="SECONDS"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo(vars.message)]"/>

            <flow-ref name="stop-activemq-broker" />
            <set-variable variableName="containerId" value="#[payload]" />
            <flow-ref name="start-activemq-broker" />
            <logger message="#[ import * from dw::Runtime --- '' wait 2000]"/>

            <until-successful maxRetries="10" millisBetweenRetries="1000">
                <flow-ref name="publish-message-to-broker" />
                <munit-tools:dequeue queueName="jmsMessagesQueue" timeout="50"  timeoutUnit="SECONDS"/>
                <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo(vars.message)]"/>
            </until-successful>

            <flow-ref name="stop-activemq-broker" />
            <set-variable variableName="containerId" value="#[payload]" />
            <flow-ref name="start-activemq-broker" />
            <logger message="#[ import * from dw::Runtime --- '' wait 2000]"/>
        </munit:execution>
        <munit:validation>
            <until-successful maxRetries="10" millisBetweenRetries="1000">
                <flow-ref name="publish-message-to-broker" />
                <munit-tools:dequeue queueName="jmsMessagesQueue" timeout="50"  timeoutUnit="SECONDS"/>
                <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo(vars.message)]"/>
            </until-successful>
        </munit:validation>
    </munit:test>

    <flow name="publish-message-to-broker">
        <set-payload value="#[output application/json --- { prophecy3008: 'Read angel, for the final days are upon us.'}]" />
        <until-successful maxRetries="10" millisBetweenRetries="2000">
            <jms:publish config-ref="JMS_SSL_Config" destination="Q1" persistentDelivery="true" timeToLive="5" timeToLiveUnit="MINUTES">
                <jms:message correlationId="#[vars.correlationID]"/>
            </jms:publish>
            <logger level="ERROR" message="EUGE: Message published!"/>
        </until-successful>
    </flow>

    <flow name="jms-messages-listener-flow" >
        <jms:listener config-ref="JMS_SSL_Config" destination="Q1" ackMode="AUTO">
            <reconnect-forever />
            <jms:consumer-type >
                <jms:queue-consumer />
            </jms:consumer-type>
        </jms:listener>
        <logger level="ERROR" message="EUGE: Received message #[payload] with correlationID : #[attributes.headers.correlationId]"/>
        <munit-tools:queue queueName="jmsMessagesQueue"/>
    </flow>

    <flow name="stop-activemq-broker">
        <java:invoke-static class="org.mule.extensions.jms.test.util.BrokerContainerLifecycleManger" method="stopContainerWithName(String, int)">
            <java:args >#[{ arg0 : vars.containerName, arg1: 0 }]</java:args>
        </java:invoke-static>
    </flow>

    <flow name="start-activemq-broker">
        <java:invoke-static class="org.mule.extensions.jms.test.util.BrokerContainerLifecycleManger" method="startContainerWithId(String)">
            <java:args >#[{ arg0 : vars.containerId }]</java:args>
        </java:invoke-static>
    </flow>
</mule>