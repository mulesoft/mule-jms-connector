<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:mtf="http://www.mulesoft.org/schema/mule/mtf"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
      http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
      http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
      http://www.mulesoft.org/schema/mule/mtf http://www.mulesoft.org/schema/mule/mtf/current/mule-mtf.xsd">

    <!-- Is required a 4.1.6 min mule version to prevent after fixing some scenarios which appeared in 4.1.5 -->
    <munit:config name="activemq-xa-other-broker-test-cases.xml" minMuleVersion="4.1.6"/>

    <munit:test name="xa-happy-path" description="Checks happy path using two different brokers">
        <munit:execution>
            <set-payload value="someValue"/>
            <flow-ref name="publish-on-other-broker"/>
            <flow-ref name="publish-on-memory"/>
        </munit:execution>
        <munit:validation>
                <try transactionalAction="ALWAYS_BEGIN" transactionType="XA">
                    <jms:consume config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1" maximumWait="1000"/>
                    <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('someValue')]"/>
                    <jms:consume config-ref="JMS_Config_XA" destination="destination_2" maximumWait="1000"/>
                    <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('someValue')]"/>
                </try>
        </munit:validation>
    </munit:test>

    <munit:test name="rollback-published-messages" description="When error happens after operations, and error is
    handled by an on-error-propagate, operations must be rolled back">
        <munit:execution>
            <set-payload value="someValue"/>
            <try>
                <try transactionType="XA" transactionalAction="ALWAYS_BEGIN">
                    <flow-ref name="publish-on-other-broker"/>
                    <flow-ref name="publish-on-memory"/>
                    <raise-error type="APP:SOME"/>
                    <error-handler>
                        <on-error-propagate/>
                    </error-handler>
                </try>
                <error-handler>
                    <on-error-continue/>
                </error-handler>
            </try>
        </munit:execution>
        <munit:validation>
            <try>
                <jms:consume config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1" maximumWait="1000"/>
                <munit-tools:fail message="Operation should have been rolled back"/>
                <error-handler>
                    <on-error-continue type="JMS:TIMEOUT"/>
                </error-handler>
            </try>
            <try>
                <jms:consume config-ref="JMS_Config_XA" destination="destination_2" maximumWait="1000"/>
                <munit-tools:fail message="Operation should have been rolled back"/>
                <error-handler>
                    <on-error-continue type="JMS:TIMEOUT"/>
                </error-handler>
            </try>
        </munit:validation>
    </munit:test>

    <munit:test name="commit-published-messages" description="When error happens after operations, and error is handled
    by an on-error-continue, operations must be committed ">
        <munit:execution>
            <try>
                <try transactionType="XA" transactionalAction="ALWAYS_BEGIN">
                    <set-payload value="first"/>
                    <flow-ref name="publish-on-other-broker"/>
                    <set-payload value="second"/>
                    <flow-ref name="publish-on-memory"/>
                    <raise-error type="APP:SOME"/>
                    <error-handler>
                        <on-error-continue/>
                    </error-handler>
                </try>
                <error-handler>
                    <on-error-continue/>
                </error-handler>
            </try>
        </munit:execution>
        <munit:validation>
            <jms:consume config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1" maximumWait="1000"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('first')]"/>
            <jms:consume config-ref="JMS_Config_XA" destination="destination_2" maximumWait="1000"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('second')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="second-publish-operation-fails" description="When error happens during an operation, and error is handled
    by an on-error-continue, the first operation must be committed">
        <munit:execution>
            <try>
                <try transactionType="XA" transactionalAction="ALWAYS_BEGIN">
                    <set-payload value="first"/>
                    <flow-ref name="publish-on-memory"/>
                    <flow-ref name="publish-on-other-broker-illegal-body"/>
                    <error-handler>
                        <on-error-continue type="JMS:ILLEGAL_BODY"/>
                    </error-handler>
                </try>
                <error-handler>
                    <on-error-continue/>
                </error-handler>
            </try>
        </munit:execution>
        <munit:validation>
            <jms:consume config-ref="JMS_Config_XA" destination="destination_2" maximumWait="1000"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('first')]"/>
            <try>
                <jms:consume config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1" maximumWait="1000"/>
                <munit-tools:fail message="Operation should have been rolled back"/>
                <error-handler>
                    <on-error-continue type="JMS:TIMEOUT"/>
                </error-handler>
            </try>
        </munit:validation>
    </munit:test>

    <munit:test name="multiple-operation-then-fails-and-rollback" description="When error happens after multiple
    operations, during a new operation, and error is handled by an on-error-propagate, the operations applied before
    must be rolled back">
        <munit:execution>
            <try>
                <try transactionType="XA" transactionalAction="ALWAYS_BEGIN">
                    <set-payload value="first"/>
                    <flow-ref name="publish-on-memory"/>
                    <set-payload value="second"/>
                    <flow-ref name="publish-on-other-broker"/>
                    <set-payload value="third"/>
                    <flow-ref name="publish-on-memory"/>
                    <set-payload value="fourth"/>
                    <flow-ref name="publish-on-memory"/>
                    <flow-ref name="publish-on-other-broker-illegal-body"/>
                </try>
                <error-handler>
                    <on-error-continue type="JMS:ILLEGAL_BODY"/>
                </error-handler>
            </try>
        </munit:execution>
        <munit:validation>
            <try>
                <jms:consume config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1" maximumWait="1000"/>
                <munit-tools:fail message="Operation should have been rolled back"/>
                <error-handler>
                    <on-error-continue type="JMS:TIMEOUT"/>
                </error-handler>
            </try>
            <try>
                <jms:consume config-ref="JMS_Config_XA" destination="destination_2" maximumWait="1000"/>
                <munit-tools:fail message="Operation should have been rolled back"/>
                <error-handler>
                    <on-error-continue type="JMS:TIMEOUT"/>
                </error-handler>
            </try>
        </munit:validation>
    </munit:test>


    <munit:test name="multiple-operation-then-fails-and-commit" description="When error happens after multiple
    operations, during a new operation, and error is handled by an on-error-continue, the operations applied before
    must be committed">
        <munit:execution>
            <try transactionType="XA" transactionalAction="ALWAYS_BEGIN">
                <set-payload value="first"/>
                <flow-ref name="publish-on-memory"/>
                <set-payload value="second"/>
                <flow-ref name="publish-on-other-broker"/>
                <set-payload value="third"/>
                <flow-ref name="publish-on-memory"/>
                <set-payload value="fourth"/>
                <flow-ref name="publish-on-memory"/>
                <flow-ref name="publish-on-other-broker-illegal-body"/>
                <error-handler>
                    <on-error-continue type="JMS:ILLEGAL_BODY"/>
                </error-handler>
            </try>
        </munit:execution>
        <munit:validation>
            <jms:consume config-ref="JMS_Config_XA" destination="destination_2" maximumWait="1000"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('first')]"/>
            <jms:consume config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1" maximumWait="1000"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('second')]"/>
            <jms:consume config-ref="JMS_Config_XA" destination="destination_2" maximumWait="1000"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('third')]"/>
            <jms:consume config-ref="JMS_Config_XA" destination="destination_2" maximumWait="1000"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo('fourth')]"/>
            <try>
                <jms:consume config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1" maximumWait="1000"/>
                <munit-tools:fail message="Operation should have been rolled back"/>
                <error-handler>
                    <on-error-continue type="JMS:TIMEOUT"/>
                </error-handler>
            </try>
        </munit:validation>
    </munit:test>

    <flow name="publish-on-memory">
        <jms:publish config-ref="JMS_Config_XA" destination="destination_2">
            <jms:message>
                <jms:body>#[payload]</jms:body>
            </jms:message>
        </jms:publish>
    </flow>

    <flow name="publish-on-other-broker">
        <jms:publish config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1">
            <jms:message>
                <jms:body>#[payload]</jms:body>
            </jms:message>
        </jms:publish>
    </flow>

    <flow name="publish-on-other-broker-illegal-body">
        <jms:publish config-ref="JMS_Config_XA_OTHER_BROKER" destination="destination_1">
            <jms:message>
                <jms:body>#[null]</jms:body>
            </jms:message>
        </jms:publish>
    </flow>

</mule>